@using System.Globalization
@implements IDisposable
@rendermode InteractiveWebAssembly


@inject IJSRuntime JsRuntime

@if (!_renderedOnClient)
{
    <h5 class="text-white text-center my-3">Launching at: @(_launchTime.ToString("MMM dd, yyyy hh:mm:ss tt", new CultureInfo("en-US"))) BRT <small>(Brasilia Time)</small></h5>
}
else
{
    // Countdown timer display
    <p class="text-white">Client time is: @(_clientTimeUtc.ToString("MMM dd, yyyy hh:mm:ss tt", new CultureInfo("en-US")))</p>
    <h3 class="text-white">Remaining Time is: @(_remainingTime)</h3>
}

@code {
    private static DateTime _launchTime = new DateTime(2024, 07, 29, 19, 0, 0);

    private DateTime _launchTimeUtc = _launchTime.ToUniversalTime();
    private DateTime _clientTimeUtc;

    private bool _renderedOnClient;
    private TimeSpan _remainingTime = TimeSpan.Zero;
    private Timer? _timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isoDateTime = await JsRuntime.InvokeAsync<string>("window.getBrowserDateTime");
            var clientDateTimeOffset = DateTimeOffset.Parse(isoDateTime);
            _clientTimeUtc = clientDateTimeOffset.LocalDateTime;
            _renderedOnClient = true;
            _timer = new Timer(UpdateCountdown, state: null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        }
    }

    private void UpdateCountdown(object? state)
    {
        _clientTimeUtc = _clientTimeUtc.AddSeconds(1);
        _remainingTime = _launchTimeUtc - _clientTimeUtc;

        if (_remainingTime <= TimeSpan.Zero)
        {
            _timer!.Dispose();
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose() => _timer?.Dispose();
}
